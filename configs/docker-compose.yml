services:
  geth-node1:
    image: ethereum/client-go:stable
    container_name: geth-node1
    volumes:
      - node1-data:/root/.ethereum
      - ./genesis.json:/genesis.json:ro
      - ./scripts:/scripts:ro
    ports:
      - "${NODE1_RPC_PORT}:${NODE1_RPC_PORT}"
      - "30303:30303"
      - "${NODE1_METRICS_PORT}:${NODE1_METRICS_PORT}"
      - "8551:8551"
    environment:
      - NETWORK_ID=${NETWORK_ID}
      - RPC_PORT=${NODE1_RPC_PORT}
      - METRICS_PORT=${NODE1_METRICS_PORT}
      - HTTP_API=${HTTP_API}
      - HTTP_CORS_DOMAIN=${HTTP_CORS_DOMAIN}
      - ENABLE_MINING=true
    entrypoint: ["/bin/sh", "/scripts/start-geth-pos.sh"]
    networks:
      - eth-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "geth attach --datadir /root/.ethereum --exec 'eth.blockNumber' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  geth-node2:
    image: ethereum/client-go:stable
    container_name: geth-node2
    volumes:
      - node2-data:/root/.ethereum
      - ./genesis.json:/genesis.json:ro
      - ./scripts:/scripts:ro
    ports:
      - "${NODE2_RPC_PORT}:${NODE2_RPC_PORT}"
      - "30304:30303"
      - "${NODE2_METRICS_PORT}:${NODE2_METRICS_PORT}"
      - "8552:8551"
    environment:
      - NETWORK_ID=${NETWORK_ID}
      - RPC_PORT=${NODE2_RPC_PORT}
      - METRICS_PORT=${NODE2_METRICS_PORT}
      - HTTP_API=${HTTP_API}
      - HTTP_CORS_DOMAIN=${HTTP_CORS_DOMAIN}
      - ENABLE_MINING=false
    entrypoint: ["/bin/sh", "/scripts/start-geth-pos.sh"]
    networks:
      - eth-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "geth attach --datadir /root/.ethereum --exec 'eth.blockNumber' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  geth-node3:
    image: ethereum/client-go:stable
    container_name: geth-node3
    volumes:
      - node3-data:/root/.ethereum
      - ./genesis.json:/genesis.json:ro
      - ./scripts:/scripts:ro
    ports:
      - "${NODE3_RPC_PORT}:${NODE3_RPC_PORT}"
      - "30305:30303"
      - "${NODE3_METRICS_PORT}:${NODE3_METRICS_PORT}"
      - "8553:8551"
    environment:
      - NETWORK_ID=${NETWORK_ID}
      - RPC_PORT=${NODE3_RPC_PORT}
      - METRICS_PORT=${NODE3_METRICS_PORT}
      - HTTP_API=${HTTP_API}
      - HTTP_CORS_DOMAIN=${HTTP_CORS_DOMAIN}
      - ENABLE_MINING=false
    entrypoint: ["/bin/sh", "/scripts/start-geth-pos.sh"]
    networks:
      - eth-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "geth attach --datadir /root/.ethereum --exec 'eth.blockNumber' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - eth-net
    restart: unless-stopped
    depends_on:
      geth-node1:
        condition: service_healthy
      geth-node2:
        condition: service_healthy
      geth-node3:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - eth-net
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  eth-net:
    driver: bridge
    name: eth-network

volumes:
  node1-data:
    name: geth-node1-data
  node2-data:
    name: geth-node2-data
  node3-data:
    name: geth-node3-data
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data
